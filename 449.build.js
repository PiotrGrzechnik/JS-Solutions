(self.webpackChunkjs_solutions=self.webpackChunkjs_solutions||[]).push([[449],{16449:(e,r,n)=>{"use strict";n.r(r),n.d(r,{basic:()=>a});var t=n(91713),a=[{category:t.Category.JAVASCRIPT,subcategory:t.JSSubcategory.ARRAY,title:"Remove duplicates from an array",icon:"las la-trash",codes:[{key:"1",title:"filter",code:"\nconst removeDuplicatesFromArray = (arr) => arr.filter((item, index) => arr.indexOf(item) === index)\n\t\t\t\t",usage:"\nconst arr = ['one','two','one']\n\nremoveDuplicatesFromArray(arr)\n\n// ['one','two']\n    \t\t"},{key:"2",title:"Set",code:"\nconst removeDuplicatesFromArray = [...new Set(arr)]\n    ",usage:"\nconst arr = ['one','two','one']\n\nremoveDuplicatesFromArray = [...new Set(arr)]\n\n// ['one','two']\n    "},{key:"3",title:"classic",code:"\nconst removeDuplicatesFromArray = (arr) => {\n\tlet unique = {};\n\tarr.forEach((item) => {\n\t\tif(!unique[item]) {\n\t\t\tunique[item] = true;\n\t\t}\n\t});\n\n\treturn Object.keys(unique);\n}\n    ",usage:"\nconst arr = ['one','two','one']\n\nremoveDuplicatesFromArray(arr)\n\n// ['one','two']\n    "}]},{category:t.Category.JAVASCRIPT,subcategory:t.JSSubcategory.ARRAY,title:"Count element occurrences in an array",icon:"las la-calculator",codes:[{key:"1",title:"reduce",code:"\nconst countOccurrences = (arr, val) => arr.reduce((acc, item) => (item === val ? acc + 1 : acc), 0)\n    ",usage:"\nconst arr = [1, 1, 2, 1, 2, 3]\n\ncountOccurrences(arr, 1)\n\n// 3\n    "}]},{category:t.Category.JAVASCRIPT,subcategory:t.JSSubcategory.ARRAY,title:"Split array to two arrays based on condition",icon:"las la-code-branch",description:"\n### Explanation:\n1. Take each item from array and invoke provided function with item as parameter\n2. If function return true add to first array\n3. If function return false add to second array\n4. Return array of two arrays\n\t\t\n\t\t\t\t",codes:[{key:"1",title:"reduce",code:"\nconst bifurcateBy = (arr, fn) =>\n\tarr.reduce((acc, val, i) =>\n\t\t(acc[fn(val, i) ? 0 : 1].push(val), acc)\n\t,[[], []])\n\t\t",usage:"\nconst arr = ['beep', 'boop', 'foo', 'bar']\nconst func = x => x[0] === 'b'\n\nbifurcateBy(arr, func)\n\n// [['beep', 'boop', 'bar'], ['foo']]\n    "}]}]}}]);