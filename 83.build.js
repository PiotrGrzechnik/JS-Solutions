(self.webpackChunkjs_solutions=self.webpackChunkjs_solutions||[]).push([[83],{32179:(n,e,o)=>{"use strict";o.r(e),o.d(e,{basic:()=>s});var t=o(91713),s=[{category:t.Category.JAVASCRIPT,subcategory:t.JSSubcategory.FUNCTION,title:"Pipe (function composition)",icon:"las la-equals",codes:[{key:"1",title:"normal",code:"\nconst pipe = (...fns) => (arg) => fns.reduce((v, fn) => fn(v), arg)\n    ",usage:"\nconst addTwo = (x) => x + 2;\nconst double = (x) => x * 2;\nconst square = (x) => x * x;\nconst fn = pipe(addTwo, double, square);\n\nfn(1);\n// square(double(addTwo(1)))\n// 36\n    "},{key:"2",title:"reverse",code:"\nconst compose = (...fns) => fns.reduce((a, b) => (...args) => a(b(...args)))\n    ",usage:"\nconst addTwo = (x) => x + 2;\nconst double = (x) => x * 2;\nconst square = (x) => x * x;\nconst fn = compose(addTwo, double, square);\n\nfn(1);\n// addTwo(double(square(1)))\n// 4\n    "}]},{category:t.Category.JAVASCRIPT,subcategory:t.JSSubcategory.FUNCTION,title:"Debounce",icon:"las la-sync",codes:[{key:"1",code:"\nconst debounce = (callback, milliseconds) => {\n\tlet timeout\n\n\treturn (argument) => {\n\t\tclearTimeout(timeout)\n\t\ttimeout = setTimeout(() => callback(argument), milliseconds)\n\t}\n}\n",usage:"\nconst debouncedFn = debounce(Fn, 500)\n"}],description:"\nDebouncing enforces that a function not be called again until a certain amount of time has passed without it being called.  \nFor example, â€œexecute this function only if 500 milliseconds have passed without it being called.\n"}]}}]);